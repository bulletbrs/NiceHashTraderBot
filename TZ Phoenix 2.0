Техническое задание для программиста: Торговый бот "Phoenix 2.0"

1. Введение:

Данное техническое задание описывает требования к разработке торгового бота "Phoenix 2.0" для автоматической торговли криптовалютами на Binance Futures (USDⓈ-M). Бот должен реализовывать стратегию, описанную ранее, используя бесплатные инструменты и API.

2. Цели и задачи:

Автоматизация торговли криптовалютами на Binance Futures.

Реализация стратегии "Phoenix 2.0" с использованием технических индикаторов, анализа настроений и прогнозирования волатильности.

Обеспечение безопасного и надежного исполнения ордеров.

Ведение подробного журнала сделок для анализа и оптимизации.

3. Технологии и инструменты:

Язык программирования: Python 3.x

Библиотеки:

ccxt: Для взаимодействия с Binance API.

numpy: Для математических вычислений.

pandas: Для работы с данными.

requests: Для отправки HTTP-запросов.

prophet: Для прогнозирования временных рядов (волатильность).

vaderSentiment: Для анализа настроений.

schedule: Для планирования задач.

API:

Binance Futures API (USDⓈ-M).

Twitter API (для анализа настроений - использование бесплатного уровня доступа).

Blockchain.com API (или аналогичный бесплатный блокчейн-обозреватель).

Платформа: Локальный сервер или VPS (Virtual Private Server).

4. Функциональные требования:

4.1. Подключение к Binance API:

Реализовать безопасное подключение к Binance Futures API с использованием ключей API и секретов.

Обработка ошибок API (например, лимиты запросов, ошибки аутентификации).

4.2. Получение данных:

Получение исторических данных (OHLCV) для BTC и ETH с таймфреймом M15 и M60.

Получение текущих данных (цена, объем).

Получение информации о балансе аккаунта.

4.3. Расчет индикаторов:

Реализовать расчет следующих технических индикаторов:

200-периодная SMA.

MACD.

RSI.

Bollinger Bands.

Ichimoku Cloud.

ATR (Average True Range).

Volume Profile (упрощенная версия, на основе исторических данных).

Оптимизация расчета индикаторов для повышения производительности.

4.4. Анализ настроений (Sentiment Analysis):

Получение данных из Twitter (ключевые слова: BTC, ETH, crypto).

Использование библиотеки vaderSentiment для анализа настроений.

Расчет индекса настроений.

4.5. On-Chain Analysis:

Получение данных о движении BTC и ETH на биржи с использованием Blockchain.com API (или аналогичного).

Определение притока и оттока средств на биржи.

4.6. Прогнозирование волатильности (ATR):

Использование библиотеки prophet для прогнозирования ATR на основе исторических данных.

Обучение модели Prophet на исторических данных ATR.

4.7. Генерация торговых сигналов:

Реализовать логику генерации торговых сигналов на основе комбинации индикаторов, анализа настроений и прогнозирования волатильности (согласно стратегии "Phoenix 2.0").

Фильтрация сигналов для повышения точности.

4.8. Управление позициями:

Размещение ордеров на покупку (Long) и продажу (Short).

Установка стоп-лосса (динамический, на основе ATR).

Установка тейк-профита (соотношение риск/прибыль 1:2).

Автоматическое закрытие позиций при достижении стоп-лосса или тейк-профита.

Управление кредитным плечом (динамическое, на основе волатильности).

4.9. Ведение журнала сделок:

Запись информации о каждой сделке в файл (CSV или JSON):

Дата и время сделки.

Актив.

Тип сделки (Long/Short).

Цена входа.

Цена выхода.

Размер позиции.

Стоп-лосс.

Тейк-профит.

Прибыль/убыток.

Комиссии.

4.10. Планирование задач:

Использование библиотеки schedule для планирования задач:

Получение данных.

Расчет индикаторов.

Генерация торговых сигналов.

Управление позициями.

5. Нефункциональные требования:

Безопасность: Обеспечение безопасности ключей API и данных аккаунта.

Надежность: Бот должен работать стабильно и без сбоев.

Производительность: Бот должен быстро обрабатывать данные и исполнять ордера.

Масштабируемость: Бот должен быть легко масштабируемым для поддержки торговли несколькими активами.

Логирование: Подробное логирование всех действий бота для отладки и анализа.

Конфигурация: Возможность настройки параметров стратегии через конфигурационный файл.

6. Интерфейс:

Консольный интерфейс для запуска и остановки бота.

Возможность просмотра текущего состояния бота (баланс, открытые позиции, журнал сделок).

7. Тестирование:

Проведение модульного тестирования для проверки корректности работы отдельных компонентов.

Проведение интеграционного тестирования для проверки взаимодействия между компонентами.

Проведение бэктестинга на исторических данных для оценки эффективности стратегии.

Проведение тестирования в реальном времени на небольшом депозите.

8. Документация:

Подробная документация по установке, настройке и использованию бота.

Описание архитектуры бота и принципов работы.

Описание API и форматов данных.

9. Сроки и этапы разработки:

Этап 1 (2 недели): Настройка окружения, подключение к Binance API, получение данных.

Этап 2 (3 недели): Реализация расчета индикаторов, анализа настроений и прогнозирования волатильности.

Этап 3 (4 недели): Реализация генерации торговых сигналов, управления позициями и ведения журнала сделок.

Этап 4 (2 недели): Тестирование, отладка и оптимизация.

Этап 5 (1 неделя): Документация и подготовка к развертыванию.

10. Критерии приемки:

Бот успешно подключается к Binance API и получает данные.

Бот корректно рассчитывает все необходимые индикаторы.

Бот генерирует торговые сигналы в соответствии со стратегией "Phoenix 2.0".

Бот успешно исполняет ордера и управляет позициями.

Бот ведет подробный журнал сделок.

Бот работает стабильно и без сбоев.

Предоставлена полная документация.

11. Дополнительные замечания:

Программист должен быть знаком с принципами безопасного программирования и защиты данных.

Программист должен быть готов к внесению изменений и улучшений в код по мере необходимости.

Программист должен предоставлять регулярные отчеты о ходе выполнения работы.

Это детализированное техническое задание должно предоставить программисту всю необходимую информацию для разработки торгового бота "Phoenix 2.0". Успешная реализация этого проекта позволит автоматизировать торговлю криптовалютами и достичь стабильной прибыли.
